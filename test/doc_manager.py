import streamlit as st


class ToolDocumentationManager:
    """工具文档管理类"""

    def __init__(self):
        self.tool_docs = {
            # ... 之前的所有工具文档保持不变
            "data_generator": {
                "title": "📊 高级数据生成工具",
                "usage": """
                ### 数据生成工具使用说明

                **Faker高级生成器:**
                - 支持生成真实感强的测试数据，包括个人信息、地址、网络信息等
                - 选择数据类别和具体类型后，设置生成数量即可
                - 完整个人信息会生成格式化的简历样式数据

                **基础数据生成器:**
                - 随机内容生成器：可生成字符串、数字、密码、UUID等
                - 随机邮箱生成器：支持自定义域名或选择预设域名
                - 电话号码生成器：支持手机号、座机、国际号码生成
                - 随机地址生成器：可按省份城市生成详细或简略地址
                - 随机身份证生成器：生成符合规则的虚拟身份证号码
                """,
                "notes": """
                ### 重要注意事项

                **数据真实性:**
                - 所有生成的数据均为虚拟数据，仅用于测试目的
                - 身份证号码符合格式规则但非真实有效号码
                - 电话号码为虚拟号码，不能用于实际通信

                **使用限制:**
                - 批量生成数量限制为1-100条，避免性能问题
                - Faker库需要单独安装：`pip install faker`
                - 国际电话号码格式仅供参考，可能因国家而异

                **隐私安全:**
                - 不要将生成的测试数据用于生产环境
                - 敏感信息生成后请妥善处理
                - 避免在公共场合展示生成的个人信息
                """
            },
            "word_counter": {
                "title": "📝 字数统计工具",
                "usage": """
                ### 字数统计工具使用说明

                **功能特点:**
                - 实时统计输入文本的各类字数信息
                - 支持字符数（含空格和不含空格）统计
                - 自动计算单词数、行数和段落数
                - 显示最常见字符的使用频率

                **统计规则:**
                - 字符数：包括所有可见和不可见字符
                - 单词数：按空格分隔的单词为单位
                - 行数：按换行符分隔
                - 段落数：按连续换行符分隔的文本块
                """,
                "notes": """
                ### 重要注意事项

                **统计精度:**
                - 单词统计基于空格分隔，中文文本可能不准确
                - 特殊字符和标点符号计入字符统计
                - 空行会计入行数但不计入段落数

                **性能考虑:**
                - 超大文本（超过10万字符）可能影响响应速度
                - 建议分段处理超长文本
                - 统计结果会实时更新，输入时请注意
                """
            },
            "text_comparison": {
                "title": "🔍 文本对比工具",
                "usage": """
                ### 文本对比工具使用说明

                **对比功能:**
                - 并排显示两个文本内容，方便直观对比
                - 使用颜色标识差异：绿色表示新增，红色表示删除
                - 支持大文本文件的对比分析

                **操作流程:**
                1. 在左侧输入原始文本
                2. 在右侧输入对比文本
                3. 点击"开始对比"查看差异
                4. 使用"清空所有内容"重置界面
                """,
                "notes": """
                ### 重要注意事项

                **对比规则:**
                - 基于行级别的差异对比
                - 空格和换行符的差异也会被检测
                - 颜色标识：绿色=新增，红色=删除，黄色=修改

                **使用限制:**
                - 超大文件对比可能较慢，建议分段处理
                - 特殊字符编码可能影响对比结果
                - 对比结果仅供参考，需要人工确认重要差异
                """
            },
            "regex_tester": {
                "title": "⚡ 正则表达式测试工具",
                "usage": """
                ### 正则表达式测试工具使用说明

                **核心功能:**
                - 实时测试正则表达式的匹配效果
                - 支持多种匹配模式：全局、忽略大小写、多行
                - 提供替换功能，测试替换效果
                - 显示详细的匹配结果和分组信息

                **匹配选项说明:**
                - 全局匹配(g)：查找所有匹配项而不仅是第一个
                - 忽略大小写(i)：不区分字母大小写
                - 多行模式(m)：^和$匹配每行的开始和结束
                """,
                "notes": """
                ### 重要注意事项

                **语法安全:**
                - 避免使用可能引起性能问题的复杂正则
                - 注意特殊字符的转义处理
                - 测试前建议先在小型数据集验证

                **性能警告:**
                - 回溯灾难性正则表达式可能导致浏览器卡顿
                - 超大文本匹配可能影响页面响应
                - 建议逐步构建复杂正则表达式

                **功能限制:**
                - 部分高级正则特性可能不支持
                - 替换功能为简单文本替换，不支持回调函数
                - 匹配数量过多时可能只显示部分结果
                """
            },
            "json_comparison": {
                "title": "📊 JSON数据对比工具",
                "usage": """
                ### JSON数据对比工具使用说明

                **主要功能:**
                - 并排显示两个JSON数据，支持格式化查看
                - 深度对比JSON结构差异
                - 统计键数量差异和具体差异点
                - 支持大JSON文件的对比分析

                **对比维度:**
                - 键的存在性：检查缺失或多余的键
                - 值的一致性：对比对应键的值差异
                - 类型匹配：验证数据类型是否一致
                - 结构完整性：检查数组长度和嵌套结构
                """,
                "notes": """
                ### 重要注意事项

                **数据格式:**
                - 确保输入的JSON格式正确有效
                - 支持标准JSON格式，不支持JSON5等扩展格式
                - 格式化功能会自动修复简单的格式错误

                **对比限制:**
                - 超大JSON文件（超过1MB）可能影响性能
                - 深度嵌套结构可能显示不完整
                - 数组顺序差异会被识别为内容差异

                **结果解读:**
                - 差异报告仅供参考，需要人工确认重要性
                - 某些差异可能是正常的业务逻辑变化
                - 建议结合具体业务场景分析差异
                """
            },
            "log_analyzer": {
                "title": "📋 日志分析工具",
                "usage": """
                ### 日志分析工具使用说明

                **分析功能:**
                - 支持文件上传和直接粘贴两种日志导入方式
                - 自动统计日志级别分布（ERROR、WARN、INFO等）
                - 可视化展示日志级别比例和数量
                - 提供强大的日志过滤和搜索功能

                **过滤选项:**
                - 按日志级别过滤：支持多选级别类型
                - 关键词搜索：支持普通搜索和正则表达式
                - 大小写敏感：精确匹配关键词
                - 实时过滤：立即显示过滤结果
                """,
                "notes": """
                ### 重要注意事项

                **文件支持:**
                - 支持.txt和.log格式的日志文件
                - 文件编码建议使用UTF-8
                - 超大日志文件可能需要较长时间处理

                **分析精度:**
                - 日志级别识别基于关键词匹配，可能不准确
                - 复杂格式的日志可能需要自定义解析规则
                - 时间戳格式识别能力有限

                **性能考虑:**
                - 超过10万行的日志文件建议分段分析
                - 复杂正则表达式搜索可能影响性能
                - 实时过滤功能在大型日志上可能较慢
                """
            },
            "time_processor": {
                "title": "⏰ 时间处理工具",
                "usage": """
                ### 时间处理工具使用说明

                **工具分类:**
                - **时间戳转换**: 时间戳与日期时间互相转换
                - **时间换算工具**: 不同时间单位之间的换算
                - **日期计算器**: 日期加减和间隔计算

                **时间戳转换:**
                - 支持秒级和毫秒级时间戳
                - 自动识别时间戳类型
                - 实时获取当前时间戳

                **时间换算:**
                - 支持常见时间单位换算
                - 提供精确到6位小数的结果
                - 内置常用时间换算表参考

                **日期计算:**
                - 支持工作日和自然日计算
                - 考虑月份天数差异和闰年情况
                - 提供详细的间隔分析
                """,
                "notes": """
                ### 重要注意事项

                **时间戳精度:**
                - 时间戳转换精度到秒级
                - 毫秒级时间戳需要手动选择类型
                - 时区基于系统当前时区设置

                **日期计算规则:**
                - 工作日计算排除周六周日
                - 月份计算按实际天数，非固定30天
                - 闰年自动识别和处理

                **使用限制:**
                - 不支持公元前日期计算
                - 极早或极晚的日期可能计算不准确
                - 时区转换功能有限，建议使用UTC时间
                """
            },
            "ip_domain_query": {
                "title": "🌐 IP/域名查询工具",
                "usage": """
                ### IP/域名查询工具使用说明

                **查询功能分类:**
                - **基本信息查询**: IP/域名归属地、运营商等信息
                - **子域名查询**: 查找主域名下的所有子域名
                - **备案信息查询**: 查询网站备案信息（中国大陆）
                - **批量查询工具**: 批量处理多个IP/域名查询
                - **IPv4转换工具**: IP地址各种格式转换
                - **旁站查询**: 查找同一服务器上的其他网站
                - **IP反查网站**: 通过IP查找使用该IP的网站

                **数据来源:**
                - 结合本地数据库和公开API查询
                - 归属地信息具体到城市级别
                - 运营商信息基于IP段数据库
                """,
                "notes": """
                ### 重要注意事项

                **数据准确性:**
                - 查询结果仅供参考，不保证100%准确
                - IP归属地可能因运营商策略而变化
                - 域名备案信息为模拟数据，实际以官方为准

                **查询限制:**
                - 批量查询有速率限制，避免频繁请求
                - 某些查询功能需要网络连接
                - 国际IP地址信息可能不完整

                **隐私保护:**
                - 查询记录不会保存到服务器
                - 敏感IP地址查询请谨慎操作
                - 遵守当地网络安全法律法规

                **功能说明:**
                - 部分高级查询功能为演示用途
                - 实际网络环境可能影响查询结果
                - 建议结合多个查询工具验证结果
                """
            }
        }

    def get_available_tools(self):
        """获取可用的工具列表"""
        return list(self.tool_docs.keys())

    def display_tool_documentation(self, tool_name):
        """
        显示指定工具的文档

        Args:
            tool_name (str): 工具名称
        """
        if tool_name not in self.tool_docs:
            st.warning(f"未找到工具 '{tool_name}' 的文档")
            return

        tool_info = self.tool_docs[tool_name]

        # 显示标题
        st.markdown(f'<div class="section-header">{tool_info["title"]}</div>',
                    unsafe_allow_html=True)

        # 显示使用说明
        with st.expander("📋 使用说明"):
            st.markdown(tool_info["usage"])

        # 显示注意事项
        with st.expander("⚠️ 注意事项"):
            st.markdown(tool_info["notes"])

    def display_general_guidelines(self):
        """
        显示通用使用说明和注意事项
        """
        st.markdown("---")
        st.markdown("### 🎯 通用使用说明")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("""
            **🔧 工具选择**
            - 左侧边栏选择需要的工具类别
            - 每个工具都有详细的功能说明
            - 支持工具内的多标签页切换

            **📊 数据操作**
            - 大部分工具支持批量操作
            - 生成结果支持一键复制和下载
            - 实时预览和即时反馈

            **🛠️ 高级功能**
            - Faker库提供真实感数据生成
            - 正则表达式测试支持多种模式
            - JSON深度对比和格式化
            """)

        with col2:
            st.markdown("""
            **📁 文件支持**
            - 支持文本文件上传和分析
            - 多种格式导出生成结果
            - 大文件分段处理建议

            **⚡ 性能优化**
            - 大型数据集的渐进式处理
            - 内存使用优化和清理
            - 响应式界面设计

            **🔒 安全隐私**
            - 本地处理，数据不上传服务器
            - 敏感信息自动清理
            - 安全的测试数据生成
            """)

        st.markdown("### ⚠️ 通用注意事项")

        st.markdown("""
        **🛡️ 安全警告**
        - 生成的测试数据严禁用于生产环境
        - 敏感操作前请确认数据备份
        - 遵守数据隐私保护法律法规

        **📏 使用限制**
        - 单次处理数据量建议在合理范围内
        - 复杂操作可能需要较长时间
        - 某些功能需要额外的依赖库支持

        **🔧 技术说明**
        - 部分功能需要网络连接
        - 浏览器兼容性：推荐Chrome/Firefox
        - 移动端体验可能有限

        **📞 问题反馈**
        - 功能问题请检查使用说明
        - 性能问题尝试减少数据量
        - 复杂需求考虑使用专业工具
        """)

    def add_tool_documentation(self, tool_name, title, usage, notes):
        """
        添加新的工具文档

        Args:
            tool_name (str): 工具名称
            title (str): 工具标题
            usage (str): 使用说明
            notes (str): 注意事项
        """
        self.tool_docs[tool_name] = {
            "title": title,
            "usage": usage,
            "notes": notes
        }

    def get_tool_info(self, tool_name):
        """
        获取指定工具的文档信息

        Args:
            tool_name (str): 工具名称

        Returns:
            dict: 工具文档信息
        """
        return self.tool_docs.get(tool_name)


# 创建单例实例
_doc_manager = ToolDocumentationManager()


# 便捷函数
def show_doc(tool_name):
    """显示工具文档 - 主要调用接口"""
    _doc_manager.display_tool_documentation(tool_name)


def show_general_guidelines():
    """显示通用使用说明和注意事项"""
    _doc_manager.display_general_guidelines()


def get_tools():
    """获取可用工具列表"""
    return _doc_manager.get_available_tools()


def add_tool(tool_name, title, usage, notes):
    """添加新工具文档"""
    _doc_manager.add_tool_documentation(tool_name, title, usage, notes)
