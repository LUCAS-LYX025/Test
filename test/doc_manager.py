import streamlit as st


class ToolDocumentationManager:
    """工具文档管理类"""

    def __init__(self):
        self.tool_docs = {
            # ... 之前的所有工具文档保持不变
            "data_generator": {
                "title": "📊 高级数据生成工具",
                "usage": """
                ### 数据生成工具使用说明

                **Faker高级生成器:**
                - 支持生成真实感强的测试数据，包括个人信息、地址、网络信息等
                - 选择数据类别和具体类型后，设置生成数量即可
                - 完整个人信息会生成格式化的简历样式数据

                **基础数据生成器:**
                - 随机内容生成器：可生成字符串、数字、密码、UUID等
                - 随机邮箱生成器：支持自定义域名或选择预设域名
                - 电话号码生成器：支持手机号、座机、国际号码生成
                - 随机地址生成器：可按省份城市生成详细或简略地址
                - 随机身份证生成器：生成符合规则的虚拟身份证号码
                """,
                "notes": """
                ### 重要注意事项

                **数据真实性:**
                - 所有生成的数据均为虚拟数据，仅用于测试目的
                - 身份证号码符合格式规则但非真实有效号码
                - 电话号码为虚拟号码，不能用于实际通信

                **使用限制:**
                - 批量生成数量限制为1-100条，避免性能问题
                - Faker库需要单独安装：`pip install faker`
                - 国际电话号码格式仅供参考，可能因国家而异

                **隐私安全:**
                - 不要将生成的测试数据用于生产环境
                - 敏感信息生成后请妥善处理
                - 避免在公共场合展示生成的个人信息
                """
            },
            "word_counter": {
                "title": "📝 字数统计工具",
                "usage": """
                ### 字数统计工具使用说明

                **功能特点:**
                - 实时统计输入文本的各类字数信息
                - 支持字符数（含空格和不含空格）统计
                - 自动计算单词数、行数和段落数
                - 显示最常见字符的使用频率

                **统计规则:**
                - 字符数：包括所有可见和不可见字符
                - 单词数：按空格分隔的单词为单位
                - 行数：按换行符分隔
                - 段落数：按连续换行符分隔的文本块
                """,
                "notes": """
                ### 重要注意事项

                **统计精度:**
                - 单词统计基于空格分隔，中文文本可能不准确
                - 特殊字符和标点符号计入字符统计
                - 空行会计入行数但不计入段落数

                **性能考虑:**
                - 超大文本（超过10万字符）可能影响响应速度
                - 建议分段处理超长文本
                - 统计结果会实时更新，输入时请注意
                """
            },
            "text_comparison": {
                "title": "🔍 文本对比工具",
                "usage": """
            ### 文本对比工具使用说明

            **核心功能:**
            - 🎯 **三种对比模式**：行对比、词对比、增强词对比，满足不同精度需求
            - 🎨 **可视化差异**：彩色高亮显示所有变化，直观易懂
            - 📊 **智能统计**：实时显示行数、词数、字符数及差异数量
            - ⚙️ **灵活设置**：支持忽略大小写、忽略空白字符等选项

            **操作流程:**
            1. **输入文本** - 在左右两侧分别输入原始文本和对比文本
            2. **配置设置** - 根据需要调整对比模式和选项
            3. **执行对比** - 点击"🔄 开始对比"按钮
            4. **查看结果** - 分析彩色高亮的差异结果和统计信息

            **快捷操作:**
            - 📋 **交换文本**：快速交换左右两侧文本内容
            - 📁 **导入示例**：加载预设示例快速体验功能
            - 🗑️ **清空所有**：一键清空所有文本内容
            """,
                "notes": """
            ### 重要注意事项

            **对比模式说明:**
            - 📝 **行对比模式**：按行进行对比，适合文档、代码文件等结构化文本
            - 🔤 **词对比模式**：按单词级别对比，适合精细化的内容修订对比
            - 🚀 **增强词对比**：更精确的词级对比，识别替换操作，适合技术文档校对

            **对比规则详解:**
            - 🟢 **绿色高亮**：新增的内容（行或词汇）
            - 🔴 **红色带删除线**：删除的内容（行或词汇）
            - 🟡 **黄色标记**：修改的内容（行对比模式）
            - ⚪ **灰色显示**：未发生变化的内容

            **设置选项说明:**
            - **忽略大小写**：不区分英文大小写差异
            - **忽略空白字符**：忽略空格、制表符等空白字符的差异
            - **显示图例**：控制是否显示颜色图例说明

            **使用建议:**
            - 💡 **性能优化**：超大文本建议分段处理，避免页面卡顿
            - 💡 **编码注意**：确保文本使用UTF-8编码，避免特殊字符显示问题
            - 💡 **结果验证**：重要差异建议人工复核，工具结果仅供参考
            - 💡 **适用场景**：代码审查、文档修订、翻译校对、内容审核等

            **技术特性:**
            - 基于Python difflib库实现，对比算法准确可靠
            - 实时文本统计，帮助快速了解文本特征
            - 响应式设计，支持各种屏幕尺寸
            - 安全的HTML转义处理，防止XSS攻击

            **温馨提示:**
            > 对于非常重要的文档对比，建议结合人工复核，确保结果的准确性。
            > 如遇性能问题，可尝试将大文本分割成多个小段分别对比。
            """
            },
            "regex_tester": {
                "title": "⚡ 正则表达式工具集",
                "usage": """
            ### 正则表达式工具集使用说明

            **三大功能模块:**

            📊 **1. 正则表达式测试工具**
            - 实时测试正则表达式的匹配效果
            - 支持多种匹配模式：全局、忽略大小写、多行、点号匹配换行
            - 提供替换功能，测试替换效果
            - 显示详细的匹配结果、分组信息和位置信息

            💻 **2. 正则表达式代码生成器**
            - 支持从预定义模式或自定义表达式生成代码
            - 覆盖多种编程语言：JavaScript、Python、PHP、Java、Go、C#、Ruby
            - 可选择不同操作类型：匹配、测试、替换
            - 自定义正则表达式标志（flags）

            🔍 **3. 从示例生成正则表达式**
            - 根据示例文本自动生成匹配的正则表达式
            - 简化复杂正则的编写过程
            - 自动测试生成结果在原文中的匹配效果

            **预定义正则表达式模式:**
            - 中文字符、Email、网址、手机号、身份证等常用模式
            - IP地址、日期格式、数字类型等通用匹配
            - 用户名、QQ号、邮政编码等特定格式
            """,
                "notes": """
            ### 重要注意事项

            **匹配选项说明:**
            - 全局匹配(g)：查找所有匹配项而不仅是第一个
            - 忽略大小写(i)：不区分字母大小写
            - 多行模式(m)：^和$匹配每行的开始和结束
            - 点号匹配换行(s)：.号可以匹配换行符

            **语法安全:**
            - 避免使用可能引起性能问题的复杂正则表达式
            - 注意特殊字符的转义处理（如 . * + ? ^ $ { } [ ] | \\ ）
            - 测试前建议先在小型数据集验证正则逻辑

            **性能警告:**
            - 回溯灾难性正则表达式可能导致页面卡顿
            - 超大文本匹配（超过10万字符）可能影响页面响应
            - 建议逐步构建复杂正则表达式，分步测试

            **代码生成说明:**
            - 生成的代码为基本模板，可能需要根据实际需求调整
            - 不同编程语言的正则表达式语法略有差异
            - 替换操作中的特殊字符需要适当转义

            **示例生成限制:**
            - 自动生成功能基于简单模式识别，复杂模式可能需要手动调整
            - 生成的表达式建议进一步优化和测试
            - 对于高度变化的模式，建议结合手动编写

            **功能限制:**
            - 部分高级正则特性可能在不同语言中支持程度不同
            - 替换功能为简单文本替换，不支持回调函数
            - 匹配数量过多时可能只显示部分结果以保证性能
            """
            },
            "json_comparison": {
                "title": "📊 JSON数据对比",
                "usage": """
                ### JSON数据对比工具使用说明

                **主要功能:**
                - 并排显示两个JSON数据，支持格式化查看
                - 深度对比JSON结构差异
                - 统计键数量差异和具体差异点
                - 支持大JSON文件的对比分析

                **对比维度:**
                - 键的存在性：检查缺失或多余的键
                - 值的一致性：对比对应键的值差异
                - 类型匹配：验证数据类型是否一致
                - 结构完整性：检查数组长度和嵌套结构
                """,
                "notes": """
                ### 重要注意事项

                **数据格式:**
                - 确保输入的JSON格式正确有效
                - 支持标准JSON格式，不支持JSON5等扩展格式
                - 格式化功能会自动修复简单的格式错误

                **对比限制:**
                - 超大JSON文件（超过1MB）可能影响性能
                - 深度嵌套结构可能显示不完整
                - 数组顺序差异会被识别为内容差异

                **结果解读:**
                - 差异报告仅供参考，需要人工确认重要性
                - 某些差异可能是正常的业务逻辑变化
                - 建议结合具体业务场景分析差异
                """
            },
            "json_parser": {
                "title": "🔍 JSON解析与格式化",
                "usage": """
        ### JSON解析与格式化工具使用说明

        **主要功能:**
        - 实时JSON语法验证和错误提示
        - 智能JSON格式化与缩进调整
        - JSON数据压缩（移除多余空格）
        - JSON结构树状可视化展示
        - 支持JSON数据类型分析统计

        **格式化特性:**
        - 自动缩进：支持2/4空格缩进配置
        - 语法高亮：关键字段颜色区分
        - 折叠展开：支持大型JSON的层级折叠
        - 行号显示：便于定位具体数据位置
        - 一键压缩：生成最小化JSON字符串

        **解析能力:**
        - 严格语法检查：验证JSON格式合规性
        - 错误定位：精确到行和字符的错误提示
        - 类型推断：自动识别并标注数据类型
        - 大小统计：计算JSON对象深度和键值数量
        """,
                "notes": """
        ### 重要注意事项

        **输入要求:**
        - 必须输入有效的JSON格式字符串
        - 支持标准的JSON数据类型（字符串、数字、布尔值、数组、对象、null）
        - 字符串必须使用双引号，单引号不被支持

        **格式化限制:**
        - 超大型JSON文件（超过10MB）可能影响性能
        - 格式化会保留原始数据的类型和值
        - 注释内容在格式化过程中会被移除

        **使用建议:**
        - 开发调试：格式化后便于阅读和调试
        - 数据传输：压缩后减少网络传输量
        - 数据验证：检查JSON结构完整性
        - 文档编写：生成清晰的数据结构说明
        """
            },

            "jsonpath_tool": {
                "title": "🎯 JSONPath查询工具",
                "usage": """
        ### JSONPath查询工具使用说明

        **主要功能:**
        - 支持标准JSONPath语法查询
        - 实时高亮显示匹配结果
        - 查询结果统计和详情展示
        - 常用查询表达式快捷选择
        - 递归查询和复杂条件过滤

        **查询能力:**
        - 基本路径查询：$.store.book[0].title
        - 递归下降查询：$..author, $..price
        - 数组操作：索引、切片、多选
        - 条件过滤：数值比较、字符串匹配、正则表达式
        - 通配符查询：* 匹配所有元素

        **结果展示:**
        - 匹配数量统计和可视化
        - 详细结果分层展开查看
        - 支持JSON和文本两种查看模式
        - 结果导出和复制功能
        """,
                "notes": """
        ### 重要注意事项

        **语法要求:**
        - JSONPath表达式必须符合标准语法规范
        - 属性访问使用 . 或 [] 语法
        - 过滤器表达式需要正确的运算符和括号

        **查询限制:**
        - 复杂正则表达式可能影响查询性能
        - 深度递归查询在大数据量时可能较慢
        - 某些高级特性需要jsonpath-ng库支持

        **性能建议:**
        - 对于大型JSON，先使用特定路径缩小范围
        - 避免在根节点使用 .. 递归查询
        - 合理使用索引和条件过滤提高效率

        ### 📚 JSONPath语法参考

        **基本语法:**
        - `$` - 根元素
        - `@` - 当前元素  
        - `.` 或 `[]` - 子元素
        - `..` - 递归下降
        - `*` - 通配符
        - `[]` - 下标操作

        **数组操作:**
        - `[0]` - 第一个元素
        - `[-1]` - 最后一个元素
        - `[0,1]` - 多个索引
        - `[start:end:step]` - 数组切片
        - `[*]` - 所有数组元素

        **过滤器:**
        - `?(@.price > 10)` - 价格大于10
        - `?(@.name == 'John')` - 名称等于John  
        - `?(@.category =~ /.*fiction/i)` - 正则匹配
        - `?(@.isbn)` - 属性存在性检查

        **函数支持:**
        - `.length()` - 获取数组长度
        - `.keys()` - 获取对象键列表
        - `.values()` - 获取对象值列表
        """
            },
            "log_analyzer": {
                "title": "📋 日志分析工具",
                "usage": """
                ### 日志分析工具使用说明

                **分析功能:**
                - 支持文件上传和直接粘贴两种日志导入方式
                - 自动统计日志级别分布（ERROR、WARN、INFO等）
                - 可视化展示日志级别比例和数量
                - 提供强大的日志过滤和搜索功能
                - 支持CSV文件格式的解析和字段筛选
                - 自动检测JSON格式数据并提取字段

                **数据导入:**
                - 文件上传：支持.txt、.log、.csv格式文件
                - 直接粘贴：支持文本内容直接粘贴输入
                - CSV文件：自动解析列结构，支持数据预览
                - JSON字段：自动识别JSON格式列并提取内部字段

                **过滤选项:**
                - 按日志级别过滤：支持多选级别类型
                - 关键词搜索：支持普通搜索和正则表达式
                - 大小写敏感：精确匹配关键词
                - 实时过滤：立即显示过滤结果
                - CSV字段筛选：按特定列值进行筛选
                - JSON字段筛选：深入JSON对象内部字段筛选
                - IP地址筛选：支持单个IP或IP段过滤
                - 状态码筛选：支持多状态码同时筛选
                - 数值范围筛选：对数值型字段进行范围筛选

                **搜索功能:**
                - 关键词搜索：支持文本内容搜索
                - 正则表达式：支持复杂模式匹配
                - 全词匹配：精确匹配完整单词
                - 大小写敏感：可控制匹配精度
                - 结果导出：支持搜索结果导出
                """,
                "notes": """
                ### 重要注意事项

                **文件支持:**
                - 支持.txt、.log、.csv格式的日志文件
                - 文件编码建议使用UTF-8
                - 超大日志文件可能需要较长时间处理
                - CSV文件会自动解析列结构和数据类型
                - JSON格式列会自动检测并提取可用字段

                **分析精度:**
                - 日志级别识别基于关键词匹配，可能不准确
                - 复杂格式的日志可能需要自定义解析规则
                - 时间戳格式识别能力有限
                - CSV文件数值类型自动检测，可能存在误差
                - JSON解析依赖标准格式，非标准格式可能解析失败

                **性能考虑:**
                - 超过10万行的日志文件建议分段分析
                - 复杂正则表达式搜索可能影响性能
                - 实时过滤功能在大型日志上可能较慢
                - CSV文件处理会占用更多内存资源
                - JSON字段提取和筛选会增加处理时间

                **功能限制:**
                - CSV文件筛选仅支持文本匹配和数值范围
                - JSON字段筛选依赖标准JSON格式
                - IP段筛选支持CIDR表示法
                - 状态码筛选支持逗号分隔的多值输入
                - 搜索功能支持正则表达式但需注意性能

                **使用建议:**
                - 对于大型CSV文件，建议先进行字段筛选再分析
                - JSON字段筛选前请确认数据格式规范性
                - 使用正则表达式搜索时建议先测试表达式
                - 数值范围筛选仅对数值型字段有效
                - 导出功能会生成时间戳命名的文件
                """
            },
            "time_processor": {
                "title": "⏰ 时间处理工具",
                "usage": """
                ### 时间处理工具使用说明

                **工具分类:**
                - **时间戳转换**: 时间戳与日期时间互相转换
                - **时间换算工具**: 不同时间单位之间的换算
                - **日期计算器**: 日期加减和间隔计算

                **时间戳转换:**
                - 支持秒级和毫秒级时间戳
                - 自动识别时间戳类型
                - 实时获取当前时间戳

                **时间换算:**
                - 支持常见时间单位换算
                - 提供精确到6位小数的结果
                - 内置常用时间换算表参考

                **日期计算:**
                - 支持工作日和自然日计算
                - 考虑月份天数差异和闰年情况
                - 提供详细的间隔分析
                """,
                "notes": """
                ### 重要注意事项

                **时间戳精度:**
                - 时间戳转换精度到秒级
                - 毫秒级时间戳需要手动选择类型
                - 时区基于系统当前时区设置

                **日期计算规则:**
                - 工作日计算排除周六周日
                - 月份计算按实际天数，非固定30天
                - 闰年自动识别和处理

                **使用限制:**
                - 不支持公元前日期计算
                - 极早或极晚的日期可能计算不准确
                - 时区转换功能有限，建议使用UTC时间
                """
            },
            "ip_domain_query": {
                "title": "🌐 IP/域名查询工具",
                "usage": """
                    ### IP/域名查询工具使用说明

                    **查询功能分类:**
                    - **IP/域名基本信息查询**: 查询单个IP或域名的归属地、运营商、地理位置等信息
                    - **批量查询工具**: 批量处理多个IP地址或域名的查询
                    - **IPv4转换工具**: IP地址的各种格式转换（十进制、点分十进制、十六进制、二进制）

                    **主要功能说明:**
                    - **基本信息查询**: 支持IPv4、IPv6地址和域名查询，显示详细的位置和网络信息
                    - **批量查询**: 支持IP地址列表和域名列表的批量查询，可导出CSV结果
                    - **格式转换**: 提供IP地址在不同格式间的相互转换

                    **数据来源:**
                    - 结合本地数据库和公开API查询
                    - 归属地信息具体到城市级别
                    - 运营商信息基于IP段数据库
                    """,
                "notes": """
                    ### 重要注意事项

                    **数据准确性:**
                    - 查询结果仅供参考，不保证100%准确
                    - IP归属地可能因运营商策略而变化

                    **查询限制:**
                    - 批量查询有速率限制，避免频繁请求
                    - 某些查询功能需要网络连接

                    **输入格式要求:**
                    - IP地址: 支持标准IPv4和IPv6格式
                    - 域名: 需符合标准域名格式（如baidu.com）
                    - 批量查询: 每行一个IP或域名，支持空行自动过滤

                    **隐私保护:**
                    - 查询记录不会保存到服务器
                    - 敏感IP地址查询请谨慎操作
                    - 遵守当地网络安全法律法规

                    **功能特点:**
                    - 自动识别输入类型（IP/域名）
                    - 支持URL格式自动提取域名
                    - 提供rDNS反向解析查询
                    - 批量查询进度实时显示
                    - 结果支持表格展示和CSV导出
                    """
            },
            "image_processor": {
                "title": "🖼️ 图片处理工具",
                "usage": """
            ### 图片处理工具使用说明

            **工具分类:**
            - **格式转换和质量调整**: 图片格式转换和质量压缩
            - **指定文件大小**: 精确控制输出图片文件大小
            - **调整尺寸**: 自定义尺寸、按比例缩放和预设尺寸
            - **图片翻转**: 上下、左右和同时翻转
            - **图片旋转**: 任意角度旋转和背景填充
            - **图片裁剪**: 手动区域裁剪和按比例裁剪
            - **添加水印**: 文字水印添加，支持中文

            **格式转换和质量调整:**
            - 支持 JPG、PNG、GIF、BMP、WEBP 格式互转
            - JPG和WEBP格式支持质量调整（1-100）
            - 提供质量优先、体积优先、平衡模式三种压缩模式
            - 保持原尺寸或自定义尺寸输出

            **指定文件大小:**
            - 精确控制输出图片的目标文件大小
            - 支持KB和MB单位设置
            - 智能压缩算法，在质量和体积间取得平衡

            **调整尺寸功能:**
            - 自定义像素尺寸调整
            - 按百分比缩放图片
            - 预设常用尺寸（社交媒体、壁纸等）
            - 多种重采样算法选择（LANCZOS、BILINEAR、NEAREST）

            **图片裁剪功能:**
            - 手动设置裁剪区域，实时预览效果
            - 按比例裁剪（1:1、16:9、4:3、3:2、9:16等）
            - 显示裁剪位置、尺寸和原图利用率
            - 支持自定义比例裁剪
            """,
                "notes": """
            ### 重要注意事项

            **格式兼容性:**
            - JPG格式不支持透明通道，透明背景将转为白色
            - PNG格式支持透明通道，适合图标和透明图片
            - GIF格式支持动画，但转换后可能丢失动画效果
            - WEBP格式提供优秀的压缩率和质量平衡

            **图片质量:**
            - 高质量设置（85-100）适合摄影和细节丰富的图片
            - 平衡模式（70-85）适合网页图片和一般用途
            - 体积优先（50-70）适合缩略图和小尺寸图片
            - 极低质量（1-50）可能导致明显质量损失

            **尺寸调整建议:**
            - 放大图片可能导致模糊和像素化
            - 缩小图片通常能保持较好质量
            - LANCZOS算法适合缩小，BILINEAR适合轻度调整
            - NEAREST算法适合像素艺术和需要保持锐利的图片

            **水印功能:**
            - 支持中文字体，自动检测系统可用字体
            - 水印位置灵活，支持9个预设位置
            - 可调整透明度、字体大小和旋转角度
            - 建议使用PNG格式保存带水印图片以保持质量

            **使用限制:**
            - 超大图片（超过10MB）处理可能较慢
            - 极高质量设置（100）可能产生较大文件
            - 某些特殊格式的元数据可能在转换中丢失
            - 动画GIF的复杂效果可能无法完美保留
            """
            },
            "crypto_tools": {
                "title": "🔐 加密/解密工具集",
                "usage": """
        ### 加密/解密工具使用说明

        **核心功能:**
        - 🔑 **多种加密算法**：支持Base64、MD5、SHA系列、对称加密、RSA等主流算法
        - 🔄 **编码转换**：提供URL、HTML、Unicode、十六进制等多种编码方式
        - 📊 **多格式输出**：MD5支持32位/16位、大小写四种格式同时生成
        - ⚙️ **灵活配置**：支持密钥设置、算法选择、参数调整等

        **操作流程:**
        1. **选择工具** - 从9种加密工具中选择需要的功能
        2. **输入内容** - 在文本框中输入要处理的内容
        3. **配置参数** - 根据需要选择算法、设置密钥等参数
        4. **执行操作** - 点击相应的加密/解密/编码/解码按钮
        5. **查看结果** - 获取处理结果并支持一键复制

        **工具分类详解:**
        - 📝 **Base64编码**：二进制数据与文本的相互转换
        - 🔑 **MD5加密**：生成不可逆的哈希值，支持多种格式
        - 🔐 **SHA加密**：安全哈希算法家族，包含HMAC和PBKDF2
        - 🗝️ **RSA加解密**：非对称加密，支持密钥生成和加解密
        - 🔒 **对称加密**：AES、DES等对称算法加解密
        - 🔗 **URL编码**：URL特殊字符的编码和解码
        - 🌐 **HTML编码**：HTML实体字符的编码和解码
        - 🔤 **Unicode编码**：Unicode转义序列处理
        - 🔢 **十六进制编码**：文本与十六进制表示转换
        """,
                "notes": """
        ### 重要注意事项

        **算法特性说明:**
        - ⚠️ **MD5特性**：单向哈希函数，无法解密，主要用于数据完整性验证
        - 🔒 **SHA系列**：提供不同安全级别的哈希算法，SHA256为当前推荐标准
        - 🗝️ **RSA加密**：非对称算法，公钥加密私钥解密，适合安全通信
        - 🔑 **对称加密**：加解密使用相同密钥，适合本地数据保护
        - 🔄 **编码工具**：可逆转换，用于数据格式处理而非安全加密

        **安全使用指南:**
        - 💡 **密钥管理**：妥善保管加密密钥，避免泄露
        - 🔐 **算法选择**：根据安全需求选择合适的加密算法
        - ⚠️ **MD5警告**：MD5已不推荐用于安全敏感场景，存在碰撞风险
        - 📋 **结果验证**：重要数据加解密后建议验证结果正确性

        **技术实现说明:**
        - **Base64解码**：自动处理填充字符，严格验证输入格式
        - **HMAC加密**：需要密钥参与，提供消息认证功能
        - **PBKDF2**：密码派生函数，适合从密码生成加密密钥
        - **RSA密钥**：支持PKCS#1和PKCS#8格式，可选密码保护

        **性能优化建议:**
        - 🚀 **大文件处理**：超大文本建议分段处理
        - 💾 **内存管理**：加密操作会占用内存，注意系统资源
        - ⏱️ **响应时间**：复杂算法如RSA可能需要较长时间

        **适用场景推荐:**
        - ✅ **数据存储**：敏感信息的加密存储
        - ✅ **通信安全**：网络传输数据的加密保护
        - ✅ **数据验证**：文件完整性检查和数字签名
        - ✅ **格式转换**：不同系统间的数据格式兼容

        **开发注意事项:**
        - 🔧 **库依赖**：部分功能需要cryptography、pycryptodome库支持
        - 🐛 **错误处理**：提供详细的错误信息和解决方案
        - 🔄 **编码兼容**：确保使用UTF-8编码处理多语言文本

        **温馨提示:**
        > 加密工具提供技术实现，实际安全应用请结合具体业务场景和安全要求。
        > 重要数据的加密密钥建议使用专业的密钥管理系统。
        > 定期更新加密算法和密钥，跟上安全技术发展。
        """
            }
        }

    def get_available_tools(self):
        """获取可用的工具列表"""
        return list(self.tool_docs.keys())

    def display_tool_documentation(self, tool_name):
        """
        显示指定工具的文档

        Args:
            tool_name (str): 工具名称
        """
        if tool_name not in self.tool_docs:
            st.warning(f"未找到工具 '{tool_name}' 的文档")
            return

        tool_info = self.tool_docs[tool_name]

        # 显示标题
        st.markdown(f'<div class="section-header">{tool_info["title"]}</div>',
                    unsafe_allow_html=True)

        # 显示使用说明
        with st.expander("📋 使用说明"):
            st.markdown(tool_info["usage"])

        # 显示注意事项
        with st.expander("⚠️ 注意事项"):
            st.markdown(tool_info["notes"])

    def display_general_guidelines(self):
        """
        显示通用使用说明和注意事项
        """
        st.markdown("---")
        st.markdown("### 🎯 通用使用说明")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("""
            **🔧 工具选择**
            - 左侧边栏选择需要的工具类别
            - 每个工具都有详细的功能说明
            - 支持工具内的多标签页切换

            **📊 数据操作**
            - 大部分工具支持批量操作
            - 生成结果支持一键复制和下载
            - 实时预览和即时反馈

            **🛠️ 高级功能**
            - Faker库提供真实感数据生成
            - 正则表达式测试支持多种模式
            - JSON深度对比和格式化
            """)

        with col2:
            st.markdown("""
            **📁 文件支持**
            - 支持文本文件上传和分析
            - 多种格式导出生成结果
            - 大文件分段处理建议

            **⚡ 性能优化**
            - 大型数据集的渐进式处理
            - 内存使用优化和清理
            - 响应式界面设计

            **🔒 安全隐私**
            - 本地处理，数据不上传服务器
            - 敏感信息自动清理
            - 安全的测试数据生成
            """)

        st.markdown("### ⚠️ 通用注意事项")

        st.markdown("""
        **🛡️ 安全警告**
        - 生成的测试数据严禁用于生产环境
        - 敏感操作前请确认数据备份
        - 遵守数据隐私保护法律法规

        **📏 使用限制**
        - 单次处理数据量建议在合理范围内
        - 复杂操作可能需要较长时间
        - 某些功能需要额外的依赖库支持

        **🔧 技术说明**
        - 部分功能需要网络连接
        - 浏览器兼容性：推荐Chrome/Firefox
        - 移动端体验可能有限

        **📞 问题反馈**
        - 功能问题请检查使用说明
        - 性能问题尝试减少数据量
        - 复杂需求考虑使用专业工具
        """)

    def add_tool_documentation(self, tool_name, title, usage, notes):
        """
        添加新的工具文档

        Args:
            tool_name (str): 工具名称
            title (str): 工具标题
            usage (str): 使用说明
            notes (str): 注意事项
        """
        self.tool_docs[tool_name] = {
            "title": title,
            "usage": usage,
            "notes": notes
        }

    def get_tool_info(self, tool_name):
        """
        获取指定工具的文档信息

        Args:
            tool_name (str): 工具名称

        Returns:
            dict: 工具文档信息
        """
        return self.tool_docs.get(tool_name)


# 创建单例实例
_doc_manager = ToolDocumentationManager()


# 便捷函数
def show_doc(tool_name):
    """显示工具文档 - 主要调用接口"""
    _doc_manager.display_tool_documentation(tool_name)


def show_general_guidelines():
    """显示通用使用说明和注意事项"""
    _doc_manager.display_general_guidelines()


def get_tools():
    """获取可用工具列表"""
    return _doc_manager.get_available_tools()


def add_tool(tool_name, title, usage, notes):
    """添加新工具文档"""
    _doc_manager.add_tool_documentation(tool_name, title, usage, notes)
